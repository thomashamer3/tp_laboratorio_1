
#ifndef TRABAJO_H_INCLUDED
#define TRABAJO_H_INCLUDED

typedef struct
{
	int id;
	int idMascota;
	int idServicio;
	sFecha fecha;
	int isEmpty;
}eTrabajo;

/**
 * InicializarTrabajo, inicializa el isEmpty en 0 para saber si estan o no estan ocupados
 * @param eTrabajo obtiene los datos de la estructura eTrabajo
 * @param int el tamaño del array
 * */
void InicializarTrabajo(eTrabajo[], int);
/**
 * BuscarLibre, busca un espacio libre para poder ingresar datos o no dependiendo si existe el espacio o no
 * @param eTrabajo obtiene los datos de la estructura eTrabajo
 * @param int el tamaño del array
 * */
int BuscarLibre(eTrabajo[], int);
/**
 * CargarTrabajo, retorna un trabajo
 * @param eServicio[] obtiene la estructura de servicios
 * @param eTrabajo[] obtiene la estructura de trabajo
 * @param int es el tamaño de la estructura de servicios
 * @param int es el tamaño de la estructura de trabajos
 * */
eTrabajo CargarTrabajo(eServicio[], eTrabajo[], eMascota[], int, int, int);
/**
 * AltaTrabajo, da el alta a un trabajo
 * @param eTrabajo[], un array de la estructura de trabajo
 * @param eServicio[], un array de la estructura de servicios
 * @param int tamaño de la estructura servicios
 * @param int tamaño de la estructura trabajos
 * */
int AltaTrabajo(eTrabajo[], eServicio[], eMascota[], int, int , int);
/**
 * ImprimirMensaje, permite imprimir el mensaje con los datos ingresados en la tabla
 * @param eTrabajo, obtiene los datos de la estructura trabajos
 * @param eServicio, obtiene los datos de la estructura servicios
 * */
void ImprimirMensaje(eTrabajo, eServicio, eMascota);
/**
 * ObtenerDescripcionDeServicio, obtiene la descripcion comparando la fk de trabajos con la pk de servicios
 * @param eTrabajo[], obtiene los datos del array de la estructura trabajo
 * @param eServicio[], obtiene los datos del array de la estructura servicios
 * @param int, es el index con los datos de la estructura de trabajo
 * @param int, es el tamaño de la estructura de servicios
 * */
int ObtenerDescripcionDeServicio(eTrabajo[], eServicio[], int, int);
/**
 * BuscarTrabajo, busca un producto por la id del mismo y devuelve el index, en caso de no encontrarlo devuelve -1
 * @param eTrabajo[], array de la estructura trabajos
 * @param int, el tamaño de la estructura trabajos
 * */
int BuscarTrabajo(eTrabajo[], int);
/**
 * OrdenarTrabajos ordena los trabajos por el bubble sort
 * @param eTrabajo[] obtiene el array de los trabajos
 * @param int, obtiene el tamaño del array
 * */
int OrdenarTrabajos(eTrabajo[], eMascota[], int, int);
/**
 * OrdenPorAnio, ordena el array filtrando por año
 * @param eTrabajo[] obtiene el array de los trabajos
 * @param int, obtiene el contador i del for
 * @param int, obtiene el contador j del for
 * */
int OrdenPorAnio(eTrabajo[], int, int);
/**
 * CasoIgualdad, contempla si existe una igualdad y ordena por el nombre de la mascota
 * @param eTrabajo[] obtiene el array de los trabajos
 * @param int, obtiene el contador i del for
 * @param int, obtiene el contador j del for
 * */
int CasoIgualdad(eTrabajo[], eMascota[], int, int, int);
int ObtenerDescripcionDeMascota(eTrabajo[], eMascota[], int, int);
/**
 * MostrarUnTrabajo, muestra un trabajo cargado
 * @param eTrabajo[], obtiene los datos del array de la estructura trabajo
 * @param eServicio[], obtiene los datos del array de la estructura servicios
 * @param int posicion en el array de la estructura de trabajos para comparar fk con pk
 * @param int tamaño del array de trabajos
 * @param int tamaño del array de servicios
 * */
void MostrarUnTrabajo(eTrabajo[], eServicio[], eMascota[], int, int, int, int);
/**
 * DetectarTrabajo, detecta si existen trabajos cargados o no, retorna un status en 1 o 0 dependiendo el caso
 * @param eTrabajo[] array de la estructura de trabajo
 * @param int tamaño del array
 * */
int DetectarTrabajo(eTrabajo [], int);
/**
 * ObtenerTrabajos, obtiene los trabajos y contempla que no esten vacios
 * @param eTrabajo[], obtiene el array de los trabajos
 * @param eServicio[], obtiene el array de los servicios
 * @param int, el tamaño del array de los trabajos
 * @param int, el tamaño del array de los servicios
 * */
void ObtenerTrabajos(eTrabajo[],eServicio[], eMascota[], int, int, int);
/**
 * MostrarTrabajos, muestra todos los trabajos ingresados en el array
 * @param eTrabajo[], obtiene el array de los trabajos
 * @param eServicio[], obtiene el array de los servicios
 * @param int, el tamaño del array de los trabajos
 * @param int, el tamaño del array de los servicios
 * */
int MostrarTrabajos(eTrabajo[],eServicio[], eMascota[], int, int, int);
/**
 * OpcionBajaTrabajo, controla la eliminacion del trabajo
 * @eTrabajo, obtiene la estructura de trabajo
 * */
eTrabajo OpcionBajaTrabajo(eTrabajo);
/**
 * DarDeBaja, busca el producto para ser eliminado
 * @param eTrabajo[], obtiene la estructura de trabajo
 * @param int, el tamaño del array
 * */
int DarDeBaja(eTrabajo[], int);
/**
 * BajaTrabajo, inicia la baja del trabajo si existe algun dato ingresado, de lo contrario da error
 * @param sTrabajos[] array de los trabajos
 * @param eServicio[] array de los servicios
 * @param int, el tamaño del array de los servicios
 * @param int, el tamaño del array de los trabajos
 * */
int BajaTrabajo(eTrabajo[], eServicio[], eMascota[], int, int, int);
/**
 * OpcionModificarTrabajo, hace la modificacion del trabajo
 * @param eTrabajo obtiene la estructura de trabajo
 * @param eServicio[] array de los servicios
 * @param int tamaño de los servicios
 * */
eTrabajo OpcionModificarTrabajo(eTrabajo, eServicio[], eMascota[], int, int, int);
/**
 * HacerModificacion, inicia la modificacion del trabajo
 * @param eTrabajo[] array de los trabajos
 * @param int tamaño del array de los trabajos
 * @param eServicio[] array de los servicios
 * @param int tamaño del array de los servicios
 * */
int HacerModificacion(eTrabajo[], int, eServicio[], int, eMascota[], int);
/**
 * ModificarTrabajo, verifica si existen datos ingresados
 * @param eTrabajo[] array de los trabajos
 * @param eServicio[] array de los servicios
 * @param int tamaño de los servicios
 * @param int tamaño de los trabajos
 * */
int ModificarTrabajo(eTrabajo[], eServicio[], eMascota[], int, int, int);

#endif // TRABAJO_H_INCLUDED
